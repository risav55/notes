# -*- coding: utf-8 -*-
"""Fuzzy Logic - Assignment_5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pLsICoPWl1xjBNVOzkTznbIGVDL0aIZe
"""

class FuzzySet:
    def __init__(self):
        self.elements = []
        self.memberships = []
    
    def add_element(self, element):
            self.elements.append(element)

    def r_function(self, alpha_value, beta_value, set1):            
            mem = []
            for element in set1.elements:
                
                if element <= alpha_value:
                    mem.append(0)
                elif element >= beta_value:
                    mem.append(1)
                else:
                    mem_value = (float(element) - float(alpha_value)) / (float(beta_value) - float(alpha_value))
                    mem.append(round(mem_value, 2))

            for element, membership in zip(set1.elements, mem):
              print(f"{element} - {membership}")
              
    def l_function(self, alpha_value, beta_value, set1):            
        mem = []
        for element in set1.elements:
            
            if element <= alpha_value:
                mem.append(1)
            elif element >= beta_value:
                mem.append(0)
            else:
                mem_value = (float(beta_value) - float(element)) / (float(beta_value) - float(alpha_value))
                mem.append(round(mem_value, 2))

        for element, membership in zip(set1.elements, mem):
          print(f"{element} - {membership}")

    
    def t_function(self, alpha_value, beta_value, gamma_value, set1):            
        mem = []
        for element in set1.elements:
            
            if element < alpha_value or element > gamma_value:
                mem.append(0)
            
            elif alpha_value <= element <= beta_value:
                mem_value = (float(element) - float(alpha_value)) / (float(beta_value) - float(alpha_value))
                mem.append(round(mem_value, 2))
            else:
                mem_value = (float(gamma_value) - float(element)) / (float(gamma_value) - float(beta_value))
                mem.append(round(mem_value, 2))

        for element, membership in zip(set1.elements, mem):
          print(f"{element} - {membership}")


    def tra_function(self, alpha_value, beta_value, gamma_value, sigma_value, set1):            
        mem = []
        for element in set1.elements:
            
            if element < alpha_value or element > sigma_value:
                mem.append(0)
            elif alpha_value <= element <= beta_value:
                mem_value = (float(element) - float(alpha_value)) / (float(beta_value) - float(alpha_value))
                mem.append(round(mem_value, 2))

            elif beta_value <= element <= gamma_value:
                mem.append(1)
            else:
                mem_value =(float(sigma_value) - float(element)) / (float(sigma_value) - float(gamma_value))
                mem.append(round(mem_value, 2))

        for element, membership in zip(set1.elements, mem):
          print(f"{element} - {membership}")

    def print_set(self):
        for i in range(len(self.elements)):
            print(self.elements[i])

set1 = FuzzySet()

n = int(input("Enter the number of elements in set: "))

for i in range(n):
    element = input(f"Enter element {i+1} in set: ")
    set1.add_element(element)


print("\nSet:")
set1.print_set()


rFunction = FuzzySet()

alpha_value = input(f"\nEnter the alpha value : ")
beta_value = input(f"\nEnter the beta value : ")
gamma_value = input(f"\nEnter the gamma value : ")
sigma_value = input(f"\nEnter the sigma value : ")

print("\nR-Function:")
rFunction.r_function(alpha_value, beta_value, set1)

lFunction = FuzzySet()
print("\nL-Function:")
lFunction.l_function(alpha_value, beta_value, set1)

tFunction = FuzzySet()
print("\nTriangular-Function:")
tFunction.t_function(alpha_value, beta_value, gamma_value, set1)

traFunction = FuzzySet()
print("\nTrapezoid-Function:")
traFunction.tra_function(alpha_value, beta_value, gamma_value,sigma_value, set1)