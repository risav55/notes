# -*- coding: utf-8 -*-
"""Fuzzy Logic - Fuzzy Set_Assignment_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wqxcWVEJGsbTmKbeUDZRSYWgXvGSLcJV
"""

class FuzzySet:
    def __init__(self):
        self.elements = []
        self.memberships = []
    
    def add_element(self, element, membership):
        if membership < 0 or membership > 1:
            print("Invalid membership value. Membership value should be between 0 and 1.")
            again_membership = float(input(f"Enter membership value of {element} AGAIN! (between 0 and 1): "))
            self.elements.append(element)
            self.memberships.append(again_membership)
        else:
            self.elements.append(element)
            self.memberships.append(membership)

    def union(self, other_set):
        union_set = FuzzySet()
        for i in range(len(self.elements)):
            union_set.add_element(self.elements[i], self.memberships[i])
        for i in range(len(other_set.elements)):
            if other_set.elements[i] not in union_set.elements:
                union_set.add_element(other_set.elements[i], other_set.memberships[i])
            else:
                index = union_set.elements.index(other_set.elements[i])
                if other_set.memberships[i] > union_set.memberships[index]:
                    union_set.memberships[index] = other_set.memberships[i]
        return union_set
    
    def intersection(self, other_set):
        intersection_set = FuzzySet()
        for i in range(len(self.elements)):
            if self.elements[i] in other_set.elements:
                index = other_set.elements.index(self.elements[i])
                if self.memberships[i] < other_set.memberships[index]:
                    intersection_set.add_element(self.elements[i], self.memberships[i])
                else:
                    intersection_set.add_element(self.elements[i], other_set.memberships[index])
        return intersection_set
    
    def complement(self):
        complement_set = FuzzySet()
        
        for i in range(len(self.elements)):
            diff = 1-self.memberships[i]
            if(diff < 0 ):
              newMem = max(0, diff)
            elif(diff > 1):
              newMem = min(1, diff)
            else:
              newMem = diff

            complement_set.add_element(self.elements[i], newMem)
            # complement_set.add_element(self.elements[i], 1 - self.memberships[i])

        return complement_set
    
    def subset(self, other_set):
        for i in range(len(other_set.elements)):
            if other_set.elements[i] not in self.elements or self.memberships[self.elements.index(other_set.elements[i])] < other_set.memberships[i]:
                return False
        return True

    def alphaCut(self, alpha_value):
      for i in range(len(self.elements)):
          if self.memberships[i] > alpha_value or self.memberships[i] == alpha_value:
            print(self.elements[i], self.memberships[i])

    def print_set(self):
        for i in range(len(self.elements)):
            print(self.elements[i], self.memberships[i])


set1 = FuzzySet()

n = int(input("Enter the number of elements in set 1: "))

for i in range(n):
    element = input(f"Enter element {i+1} in set 1: ")
    membership = float(input(f"Enter membership value of {element} in set 1 (between 0 and 1): "))
    set1.add_element(element, membership)

set2 = FuzzySet()

n = int(input("\nEnter the number of elements in set 2: "))

for i in range(n):
    element = input(f"Enter element {i+1} in set 2: ")
    membership = float(input(f"Enter membership value of {element} in set 2 (between 0 and 1): "))
    set2.add_element(element, membership)

union_set = set1.union(set2)
intersection_set = set1.intersection(set2)
complement_set = set1.complement()

print("\nSet 1:")
set1.print_set()
print("\nSet 2:")
set2.print_set()
print("\nUnion Set:")
union_set.print_set()
print("\nIntersection Set:")
intersection_set.print_set()
print("\nComplement of Set 1:")
complement_set.print_set()
print("\nIs Set 2 a subset of Set 1?", set1.subset(set2))
print("Is Set 1 a subset of Set 2?", set2.subset(set1))

alpha_cut = FuzzySet()

alpha_value = float(input(f"\nEnter the alpha cut value : "))
print("\nAlpha Cut:")
the_elements = union_set.alphaCut(alpha_value)