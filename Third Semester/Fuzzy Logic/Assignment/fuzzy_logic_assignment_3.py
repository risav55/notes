# -*- coding: utf-8 -*-
"""Fuzzy Logic - Assignment_3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ET0nrj6nEr_mW9AX-l5Z1ncyeMeIp4i
"""

class FuzzySet:
    def __init__(self):
        self.elements = []
        self.memberships = []
    
    def add_element(self, element, membership):
        if membership < 0 or membership > 1:
            print("Invalid membership value. Membership value should be between 0 and 1.")
            again_membership = float(input(f"Enter membership value of {element} AGAIN! (between 0 and 1): "))
            self.elements.append(element)
            self.memberships.append(again_membership)
        else:
            self.elements.append(element)
            self.memberships.append(membership)

    def height(self):
      print(max(self.memberships))

    def supportA(self, other_set):
      support = []
      for i in range(len(other_set.elements)):
            if other_set.elements[i] in self.elements and self.memberships[self.elements.index(other_set.elements[i])] >= other_set.memberships[i]:
                if(other_set.memberships[i] > 0):
                    support.append(other_set.elements[i])
      if(len(support) > 0):
        print("Support of Fuzzy Set A: ", support)
      else:
        print("Support of Fuzzy Set A: NULL")


    def coreA(self, other_set):
      core = []
      for i in range(len(other_set.elements)):
            if other_set.elements[i] in self.elements and self.memberships[self.elements.index(other_set.elements[i])] >= other_set.memberships[i]:
                if(other_set.memberships[i] == 1):
                    core.append(other_set.elements[i])
      if(len(core) > 0):
        print("Core of Fuzzy Set A: ", core)
      else:
        print("Core of Fuzzy Set A: NULL")

    def boundaryA(self, other_set):
      boundary = []
      for i in range(len(other_set.elements)):
            if other_set.elements[i] in self.elements and self.memberships[self.elements.index(other_set.elements[i])] >= other_set.memberships[i]:
                if(other_set.memberships[i] < 1 and other_set.memberships[i] >0):
                    boundary.append(other_set.elements[i])
      if(len(boundary) > 0):
        print("Boundary of Fuzzy Set A: ", boundary)
      else:
        print("Boundary of Fuzzy Set A: NULL")

        
    def print_set(self):
        for i in range(len(self.elements)):
            print(self.elements[i], self.memberships[i])


union = FuzzySet()

n = int(input("Enter the number of elements in Union Set: "))

for i in range(n):
    element = input(f"Enter element {i+1} in Union Set: ")
    membership = float(input(f"Enter membership value of {element} in Union Set (between 0 and 1): "))
    union.add_element(element, membership)

setA = FuzzySet()

n = int(input("\nEnter the number of elements in set A: "))

for i in range(n):
    element = input(f"Enter element {i+1} in set A: ")
    membership = float(input(f"Enter membership value of {element} in set A (between 0 and 1): "))
    setA.add_element(element, membership)


print("\nUnion Set:")
union.print_set()
print("\nSet A:")
setA.print_set()

print("\nHeight of Fuzzy Set A:")
setA.height()

print("\nSupport: For Fuzzy Set A over Union set (X)")
union.supportA(setA)

print("\nCore: For Fuzzy Set A over Union set (X)")
union.coreA(setA)

print("\nBoundary: For Fuzzy Set A over Union set (X)")
union.boundaryA(setA)